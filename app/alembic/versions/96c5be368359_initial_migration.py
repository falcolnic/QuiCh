"""Initial migration

Revision ID: 96c5be368359
Revises: initial
Create Date: 2024-10-22 14:45:31.983559

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op

# revision identifiers, used by Alembic.
revision: str = "96c5be368359"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop new tables if they already exist
    op.execute("DROP TABLE IF EXISTS chunks_new")
    op.execute("DROP TABLE IF EXISTS docs_new")
    op.execute("DROP TABLE IF EXISTS transcriptions_new")
    op.execute("DROP TABLE IF EXISTS videos_new")

    # Create new tables with the correct column types
    op.create_table(
        "chunks_new",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("chunk_id", sa.String(), nullable=False),
        sa.Column("title", sa.String(), nullable=True),
        sa.Column("source", sa.String(), nullable=True),
        sa.Column("context", sa.String(), nullable=True),
        sa.Column("start", sa.Integer(), nullable=True),
        sa.Column("embedding", sa.LargeBinary(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "docs_new",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("chunk_id", sa.String(), nullable=False),
        sa.Column("video_id", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "transcriptions_new",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("video_id", sa.String(), nullable=False),
        sa.Column("transcript", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "videos_new",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("transcript", sa.String(), nullable=False),
        sa.Column("video_id", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )

    # Copy data from old tables to new tables
    op.execute(
        "INSERT INTO chunks_new (id, chunk_id, title, source, context, start, embedding) SELECT id, chunk_id, title, source, context, start, embedding FROM chunks"
    )
    op.execute(
        "INSERT INTO docs_new (id, chunk_id, video_id) SELECT id, chunk_id, video_id FROM docs"
    )
    op.execute(
        "INSERT INTO transcriptions_new (id, video_id, transcript) SELECT id, video_id, transcript FROM transcriptions"
    )
    op.execute(
        "INSERT INTO videos_new (id, transcript, video_id) SELECT id, transcript, video_id FROM videos"
    )

    # Drop old tables
    op.drop_table("chunks")
    op.drop_table("docs")
    op.drop_table("transcriptions")
    op.drop_table("videos")

    # Rename new tables to old table names
    op.rename_table("chunks_new", "chunks")
    op.rename_table("docs_new", "docs")
    op.rename_table("transcriptions_new", "transcriptions")
    op.rename_table("videos_new", "videos")
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Create old tables with the original column types
    op.create_table(
        "chunks_old",
        sa.Column("id", sa.NUMERIC(), nullable=False),
        sa.Column("chunk_id", sa.String(), nullable=False),
        sa.Column("title", sa.String(), nullable=True),
        sa.Column("source", sa.String(), nullable=True),
        sa.Column("context", sa.String(), nullable=True),
        sa.Column("start", sa.Integer(), nullable=True),
        sa.Column("embedding", sa.LargeBinary(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "docs_old",
        sa.Column("id", sa.NUMERIC(), nullable=False),
        sa.Column("chunk_id", sa.String(), nullable=False),
        sa.Column("video_id", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "transcriptions_old",
        sa.Column("id", sa.NUMERIC(), nullable=False),
        sa.Column("video_id", sa.String(), nullable=False),
        sa.Column("transcript", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_table(
        "videos_old",
        sa.Column("id", sa.NUMERIC(), nullable=False),
        sa.Column("transcript", sa.String(), nullable=False),
        sa.Column("video_id", sa.String(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
    )

    # Copy data from new tables to old tables
    op.execute(
        "INSERT INTO chunks_old (id, chunk_id, title, source, context, start, embedding) SELECT id, chunk_id, title, source, context, start, embedding FROM chunks"
    )
    op.execute(
        "INSERT INTO docs_old (id, chunk_id, video_id) SELECT id, chunk_id, video_id FROM docs"
    )
    op.execute(
        "INSERT INTO transcriptions_old (id, video_id, transcript) SELECT id, video_id, transcript FROM transcriptions"
    )
    op.execute(
        "INSERT INTO videos_old (id, transcript, video_id) SELECT id, transcript, video_id FROM videos"
    )

    # Drop new tables
    op.drop_table("chunks")
    op.drop_table("docs")
    op.drop_table("transcriptions")
    op.drop_table("videos")

    # Rename old tables to new table names
    op.rename_table("chunks_old", "chunks")
    op.rename_table("docs_old", "docs")
    op.rename_table("transcriptions_old", "transcriptions")
    op.rename_table("videos_old", "videos")
    # ### end Alembic commands ###
