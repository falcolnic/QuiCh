{% extends 'base.jinja2' %}
{% block content %}
<style>
    body {
        overflow: hidden;
        margin: 0;
        height: 100vh;
    }
    .btn-orange {
        border: 2px solid transparent;
        border-radius: 30px;
        color: #0f0009;
        display: inline-block;
        font-size: 1.4rem;
        font-weight: 400;
        line-height: 2.2rem;
        overflow: hidden;
        padding: 8px 20px;
        position: relative;
        text-align: center;
        text-decoration: none !important;
        transition: all .4s ease-in-out;
        z-index: 1;
        background: #ff9c1b;
    }
    .btn-orange:before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: #fff;
        z-index: -1;
        transition: transform .3s ease-in-out;
        transform: scaleX(0);
        transform-origin: right;
    }
    .btn-orange:hover:before {
        transform: scaleX(1);
        transform-origin: left;
    }
    .btn-orange:hover {
        color: #0f0009;
        border-color: #000;
    }
    .btn-orange:active {
        transform: scale(0.95);
        transition: transform 0.1s ease-in-out;
    }
    /* Home arrow styles */
    .home-arrow {
        position: fixed;
        top: 20px;
        left: 20px;
        color: #ff9c1b;
        font-size: 2rem;
        z-index: 100;
        transition: transform 0.3s ease;
        display: flex;
        align-items: center;
        text-decoration: none;
    }
    .home-arrow:hover {
        transform: translateX(-5px);
    }
    .home-arrow svg {
        width: 40px;
        height: 40px;
    }
</style>

<!-- Back to home arrow -->
<a href="/" class="home-arrow" title="Back to Home">
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor">
        <path d="M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z"/>
    </svg>
</a>

<div class="min-h-screen bg-gray-100 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8 bg-white p-8 rounded-xl shadow-lg transform transition-all hover:shadow-xl">
        <div>
            <h2 class="text-center text-3xl font-extrabold text-gray-900">Sign In</h2>
            <p class="mt-2 text-center text-sm text-gray-600">
                Don't have an account? 
                <a href="/v1/signup" class="font-medium text-orange-500 hover:text-orange-400">Sign up</a>
            </p>
        </div>
        <form id="signinForm" class="space-y-6">
            <div id="errorMessage" class="hidden bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative" role="alert">
                <span class="block sm:inline"></span>
            </div>
            <div>
                <label for="email" class="block text-sm font-medium text-gray-700">Email address</label>
                <div class="mt-1 relative">
                    <input type="email" id="email" name="email" required
                        class="appearance-none block w-full text-black px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-orange-500 focus:border-orange-500 sm:text-sm"
                        placeholder="Enter your email">
                </div>
            </div>
            <div>
                <label for="password" class="block text-sm font-medium text-gray-700">Password</label>
                <div class="mt-1 relative">
                    <input type="password" id="password" name="password" required
                        class="appearance-none block w-full text-black px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-orange-500 focus:border-orange-500 sm:text-sm"
                        placeholder="Enter your password">
                    <button type="button" id="togglePassword" class="absolute inset-y-0 right-0 pr-3 flex items-center text-sm leading-5">
                        <svg class="h-5 w-5 text-gray-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                        </svg>
                    </button>
                </div>
            </div>
            <!-- Hidden fields for location data -->
            <input type="hidden" id="userIp" name="ip_address" value="">
            <input type="hidden" id="userLocation" name="location" value="">
            <div>
                <button type="submit" id="submitButton"
                        class="btn-orange group relative w-full flex justify-center"
                        style="animation: fadeInUp 1s; ease-out;">
                    <span id="buttonText">Sign In</span>
                    <svg id="loadingSpinner" class="hidden animate-spin h-5 w-5 text-black ml-2" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                </button>
            </div>
        </form>
    </div>
    <img src="../static/abstract-icon-391788-512.svg" alt="shape" class="lazy-img absolute left-[13%] 2xl:left-[13%] lg:left-[16%] top-[20%] d-none d-lg-block w-[150px] rotate-45" loading="lazy">
    <img src="../static/shape_172.svg" alt="shape" class="lazy-img absolute right-[17%] 2xl:right-[15%] lg:right-[16%] top-[52%] d-none d-lg-block" loading="lazy">
</div>

<script>
document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('signinForm');
    const submitButton = document.getElementById('submitButton');
    const buttonText = document.getElementById('buttonText');
    const loadingSpinner = document.getElementById('loadingSpinner');
    const errorMessage = document.getElementById('errorMessage');
    const togglePassword = document.getElementById('togglePassword');
    const passwordInput = document.getElementById('password');
    const ipField = document.getElementById('userIp');
    const locationField = document.getElementById('userLocation');

    async function getUserLocation() {
        try {
            // Use the public endpoint
            const res = await fetch('/v1/proxy/location');
            if (!res.ok) {
                throw new Error(`Error fetching location: ${res.status}`);
            }
            const data = await res.json();
            ipField.value = data.ip || '';

            const locationParts = [data.city, data.region, data.country_name]
                .filter(Boolean)
                .filter((v, i, a) => a.indexOf(v) === i);

            locationField.value = locationParts.join(', ');

        } catch (err) {
            console.error('Error getting location data:', err);
            // Still allow form submission even if we can't get location
            ipField.value = '';
            locationField.value = '';
        }
    }

    getUserLocation();
    passwordInput.addEventListener('input', function(e) {
        if (e.target.value.includes(' ')) {
            e.target.value = e.target.value.replace(/\s/g, '');
        }
    });

    togglePassword.addEventListener('click', () => {
        const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
        passwordInput.setAttribute('type', type);
        togglePassword.querySelector('svg').classList.toggle('text-gray-500');
        togglePassword.querySelector('svg').classList.toggle('text-orange-500');
    });

    form.addEventListener('submit', async (e) => {
        e.preventDefault();
        submitButton.disabled = true;
        buttonText.classList.add('hidden');
        loadingSpinner.classList.remove('hidden');
        errorMessage.classList.add('hidden');

        try {
            const formData = new FormData(form);
            const response = await fetch('/v1/signin', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    email: formData.get('email'),
                    password: formData.get('password'),
                    ip_address: formData.get('ip_address'),
                    location: formData.get('location')
                })
            });

            if (response.ok) {
                window.location.href = '/';
            } else {
                const error = await response.json();
                errorMessage.classList.remove('hidden');
                errorMessage.querySelector('span').textContent = error.detail || 'Invalid email or password';
            }
        } catch (error) {
            errorMessage.classList.remove('hidden');
            errorMessage.querySelector('span').textContent = 'Network error, please try again';
        } finally {
            submitButton.disabled = false;
            buttonText.classList.remove('hidden');
            loadingSpinner.classList.add('hidden');
        }
    });
});
</script>
{% endblock %}
